(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{270:function(t,e,a){"use strict";a.r(e);var n=a(2),i=Object(n.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.")])]),t._v(" "),a("h2",{attrs:{id:"写在前面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写在前面","aria-hidden":"true"}},[t._v("#")]),t._v(" 写在前面")]),t._v(" "),a("p",[t._v("Git是目前世界上最先进的分布式版本控制系统。")]),t._v(" "),a("p",[t._v("都9102年了，如果作为程序员的你，对git还不是很了解，那你就该抓紧了。")]),t._v(" "),a("p",[t._v("接下来我只会写部分常用到的git操作命令，如果想深入了解git，在文章的末尾附有廖雪峰老师的教程还有一篇我很喜欢的文章，都可以去看看。")]),t._v(" "),a("h2",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("git 初始化\n对于初始化git项目来说，有两种不同的情况，将使用不同的初始化方法：")]),t._v(" "),a("p",[t._v("第一种是本地建仓，远程仓库只是一个空的仓库时:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//这个命令会帮助你在当前文件中新建一个本地的git仓库，目录中会出现一个`.git`文件。这时候你就可以使用git的其他操作命令了。\n$ git init\n\n//在远程建立一个空的仓库，会得到一串远程仓库的地址,接下来我们通过使用这个地址添加远程仓库\ngit remote add origin git@github.com:XXX/XXX.git\n\n//使用 git remote -v 可以看到当前本地仓库关联的所有远程仓库\n$ git remote -v\n\norigin  git@github.com:XXX/XXX.git (fetch)\norigin  git@github.com:XXX/XXX.git (push)\n\n//接下来一步到位，因为后面会详细讲（注意：在没有添加SSH之前，push命令会要求你出入账号密码）\n$ git add -a\n$ git commit -m '第一次提交'\n$ git push  -u origin master\n\n")])])]),a("p",[t._v("第二种是远程仓库已经有内容，我们需要将代码拉取下来时：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git clone git@github.com:XXX/XXX.git\n")])])])]),t._v(" "),a("li",[a("p",[t._v("一些概念"),a("br"),t._v("\n在介绍下面的命令前，咱们得先弄明白 git 几个存放文件的地方的概念：工作区（Working Directory）、版本库【其中包含暂存区（stage）和其他内容，也可以理解为是本地仓库】和 远程仓库。")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("工作区")]),t._v("：也就是咱们平时编辑的文件的位置，在工作区，我们可以随意编辑其中的文件。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("暂存区")]),t._v("：我们通过"),a("code",[t._v("git add")]),t._v("命令，可以将"),a("code",[t._v("工作区")]),t._v("中变动的文件添加到"),a("code",[t._v("暂存区")]),t._v("，但仅仅只是暂存，还没有影响版本库中的代码。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("版本库")]),t._v("：我们通过"),a("code",[t._v("git commit")]),t._v(" 命令，将"),a("code",[t._v("暂存区")]),t._v("所有的内容都提交到版本库的"),a("code",[t._v("当前分支")]),t._v("，如果没有做过对应分支设置，那么默认的，当前分支将会是"),a("code",[t._v("master")]),t._v("分支。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("远程仓库")]),t._v("：这个很好理解，就是在远程服务器上给我们存放内容的仓库，我们一般通过"),a("code",[t._v("git push")]),t._v("命令，将本地版本库当前分支上的内容给"),a("code",[t._v("推送")]),t._v("到远程仓库。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("分支")]),t._v("：有同学会对上的"),a("code",[t._v("分支")]),t._v("感到有疑惑，试想一下，在实际项目中，我有一个很好的ideal想要去做做看，但是我又不能影响开发的进度，怎么办？我可以分出来一条分支来做开发，相当于两条分支起点相同，但是它们发展方向却不一样。当然如果后面我发现，哎！我这个ideal还可以，可以加入到项目中，那么我只要做一下"),a("code",[t._v("分支的合并")]),t._v("即可。")])])])]),t._v(" "),a("li",[a("p",[t._v("git pull")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//从默认的远程仓库（origin）的默认分支（master）上，拉取代码\n$ git pull\n//也可以指定要去哪个远程仓库的哪个分支上拉取代码\n$ git pull <remote> <branch> \n")])])]),a("p",[a("code",[t._v("git pull")]),t._v("实际上是两步操作合并为一步：")]),t._v(" "),a("ol",[a("li",[t._v("第一步我们得从"),a("code",[t._v("远程仓库")]),t._v("拉取最新的代码到"),a("code",[t._v("本地仓库")]),t._v(",这一步我们也可以用下面的命令来做："),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" $ git fetch <remote>\n")])])])]),t._v(" "),a("li",[t._v("第二步是将"),a("code",[t._v("本地仓库")]),t._v("当前分支和"),a("code",[t._v("远程仓库")]),t._v("对应的分支进行合并,这一步我们也可以用下面的命令来做："),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git merge <branch>\n")])])])])]),t._v(" "),a("p",[t._v("我们可以认为"),a("code",[t._v("git pull = git fetch + git merge")]),t._v(","),a("code",[t._v("git pull")]),t._v("在调用时会自动给"),a("code",[t._v("git fetch")]),t._v("和"),a("code",[t._v("git merge")]),t._v("指定的远程仓库名和分支名。")])]),t._v(" "),a("li",[a("p",[t._v("git add 和 git commit")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//添加所有改动过的内容到暂存区\n$ git add -a\n//这里在提交时最好附上'提交信息'，让你团队和你自己知道你提交的是什么东西\n$ git commit -m [message]\n")])])])]),t._v(" "),a("li",[a("p",[t._v("git push")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//上传本地指定分支到远程仓库\n$ git push [remote][branch]\t\n//强行推送当前分支到远程仓库，即使有冲突(!!玩火操作，在多人协作项目中最好不要用，有被打死的风险)\n$ git push [remote] --force\t\n//\t推送所有分支到远程仓库\n$ git push [remote] --all\n")])])])]),t._v(" "),a("li",[a("p",[t._v("git branch\ngit 的分支功能极其强大，可以做很多骚操作.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//列出所有本地分支\ngit branch\n//列出所有远程分支\ngit branch -r\n//列出所有本地分支和远程分支\ngit branch -a\n\n// 新建一个分支，但依然停留在当前分支\ngit branch [branch-name]\n\n//新建一个分支，并切换到该分支\ngit checkout -b [branch-name]\n\n//新建一个分支，与指定的远程分支建立追踪关系\ngit branch --track [branch][remote-branch]\n\n//切换到指定分支，并更新工作区\ngit checkout [branch-name]\n\n//删除分支\ngit branch -d [branch-name]\n\n//删除远程分支\ngit push origin --delete [branch-name]\n")])])])]),t._v(" "),a("li",[a("p",[t._v("git tag\ngit中有打tag标记的功能，一般用于记录特定时间的提交点(commit)，项目中常用于给代码打上版本，用于以后有问题时回滚。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//先切换到你想打tag的分支上\n$ git checkout master\nSwitched to branch \'master\'\n\n//下面的命令就成功打上了你命名的标记\n$ git tag <name>\n//如果是以前的代码需要打tag，可以使用对应的commit id 来打tag\n$ git log --pretty=oneline --abbrev-commit\n\n4c805e2 fix bug 101\ne1e9c68 merge with no-ff\nf52c633 add merge\n\n$ git tag v1.0.0 f52c633\n\n//查看所有tag\n$ git tag\n//查看指定tag\n$git show <tagname>\n\n//还可以带上个说明\n//下面命令是让git 在提交点 1094adb 打一个标签，标签名为v0.1,标签信息为"version 0.1 released"\n$ git tag -a v0.1 -m "version 0.1 released" 1094adb\n')])])])]),t._v(" "),a("li",[a("p",[t._v("其他命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//显示有变更的文件 \ngit status\t\n//显示当前分支的版本历史\ngit log\t\n//显示暂存区和工作区的差异\ngit diff\t\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"}},[t._v("廖雪峰-Git教程"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/599e14875188251240632702",target:"_blank",rel:"noopener noreferrer"}},[t._v("一篇文章，教你学会Git"),a("OutboundLink")],1)])])])},[],!1,null,null,null);e.default=i.exports}}]);